.bezierContainer {
    width: 100%;
    height: 50vh;
    min-width: 400px;
    min-height: 400px;
    font-size: small;
    display: flex;
    flex-direction: column;
    border: 1px solid lightgray;
    background-color: white;
}

.playground {
    width: 100%;
    position: relative;
    flex-grow: 1;
}

.thecurve {
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
}

.thepoints, .cpoints1, .cpoints2, .clines1, .clines2 {
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
}

.svgcode {
    border: 1px solid lightgray;
    padding: 5px;
    border-radius: 3px;
    background-color: #cbb595;
}

.svgcode p {
    margin: 5px 0;
}

.svgcodeText {
    /* easy way to plop the elements on top of each other and have them both sized based on the tallest one's height */
    display: grid;
}

.svgcodeText::after {
    /* Note the weird space! Needed to preventy jumpy behavior */
    content: attr(data-replicated-value) " ";

    /* This is how textarea text behaves */
    white-space: pre-wrap;

    /* Hidden from view, clicks, and screen readers */
    visibility: hidden;
}

.svgcodeText > textarea {
    /* You could leave this, but after a user resizes, then it ruins the auto sizing */
    resize: none;

    /* Firefox shows scrollbar on growth, you can hide like this. */
    overflow: hidden;
}

.svgcodeText > textarea,
.svgcodeText::after {
    /* Identical styling required!! */
    border: 1px solid black;
    padding: 0.5rem;
    font: inherit;
    font-size: 12px;
    width: 100%;
    box-sizing: border-box;
    margin-bottom: 0;

    /* Place on top of each other */
    grid-area: 1 / 1 / 2 / 2;
}
